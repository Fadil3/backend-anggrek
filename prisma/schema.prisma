// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  MEMBER
  ADMINISTRATOR
  SUPER_ADMINISTRATOR
}

model User {
  id                    String            @id @default(uuid())
  createdAt             DateTime          @default(now())
  email                 String            @unique
  name                  String
  password              String
  image_profile         String?           @default("public\\uploads\\profile\\default-profile.png")
  role                  ROLE              @default(MEMBER)
  contributor_glosarium UserOnGlosarium[]
  contributor_anggrek   UserOnAnggrek[]
  posts                 Post[]
  comments              Comment[]
  articles              Article[]
}

// glosarium
model Glosarium {
  id          String            @id @default(uuid())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  name        String            @db.VarChar(255)
  description String
  contributor UserOnGlosarium[]
}

model UserOnGlosarium {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  glosarium   Glosarium @relation(fields: [glosariumId], references: [id])
  glosariumId String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
}

// anggrek
model Anggrek {
  id          String          @id @default(uuid())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  name        String          @db.VarChar(255)
  localName   String          @default("")
  description String          @default("")
  degree      String          @default("")
  light       String          @default("")
  humidity    String          @default("")
  references  String
  isApproved  Boolean         @default(false)
  deletedAt   DateTime?
  photos      AnggrekPhoto[]
  contributor UserOnAnggrek[]
}

model UserOnAnggrek {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  anggrek   Anggrek  @relation(fields: [anggrekId], references: [id])
  anggrekId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model AnggrekPhoto {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  caption   String   @default("")
  link      String   @default("")
  path      String
  anggrek   Anggrek  @relation(fields: [anggrekId], references: [id])
  anggrekId String
}

model Post {
  id        String    @id @default(uuid())
  slug      String    @default("")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  title     String
  content   String    @db.Text
  published Boolean   @default(false)
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  comments  Comment[]
  // category   PostCategory @relation(fields: [categoryId], references: [id])
  // categoryId String
  // Views     Views[]
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
}

// model PostCategory {
//   id        String   @id @default(uuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   name      String
//   posts     Post[]
// }

model Article {
  id          String              @id @default(uuid())
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  title       String
  content     String              @db.Text
  description String
  published   Boolean             @default(false)
  author      User                @relation(fields: [authorId], references: [id])
  authorId    String
  categories  categoryOnArticle[]
  infographic Infographic[]
}

model Infographic {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  path      String
  article   Article  @relation(fields: [articleId], references: [id])
  articleId String
}



model ArticleCategory {
  id        String              @id @default(uuid())
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  name      String
  articles  categoryOnArticle[]
}

model categoryOnArticle {
  id         String          @id @default(uuid())
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  article    Article         @relation(fields: [articleId], references: [id])
  articleId  String
  category   ArticleCategory @relation(fields: [categoryId], references: [id])
  categoryId String
}

model imageUpload {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  path      String
}

// model Views {
//   id        String   @id @default(uuid())
//   createdAt DateTime @default(now())
//   count     Int
//   article   Article? @relation(fields: [articleId], references: [id])
//   articleId String?
//   post      Post?    @relation(fields: [postId], references: [id])
//   postId    String?
// }

// model Likes {
//   id        String   @id @default(uuid())
//   createdAt DateTime @default(now())
//   post      Post     @relation(fields: [postId], references: [id])
//   postId    String
// }
